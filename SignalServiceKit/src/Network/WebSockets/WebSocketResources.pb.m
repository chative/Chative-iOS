// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "WebSocketResources.pb.h"
// @@protoc_insertion_point(imports)

@implementation WebSocketResourcesWebSocketResourcesRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [WebSocketResourcesWebSocketResourcesRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface WebSocketResourcesWebSocketRequestMessage ()
@property (strong) NSString* verb;
@property (strong) NSString* path;
@property (strong) NSData* body;
@property (strong) NSMutableArray * headersArray;
@property UInt64 requestId;
@end

@implementation WebSocketResourcesWebSocketRequestMessage

- (BOOL) hasVerb {
  return !!hasVerb_;
}
- (void) setHasVerb:(BOOL) _value_ {
  hasVerb_ = !!_value_;
}
@synthesize verb;
- (BOOL) hasPath {
  return !!hasPath_;
}
- (void) setHasPath:(BOOL) _value_ {
  hasPath_ = !!_value_;
}
@synthesize path;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
@synthesize headersArray;
@dynamic headers;
- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) _value_ {
  hasRequestId_ = !!_value_;
}
@synthesize requestId;
- (instancetype) init {
  if ((self = [super init])) {
    self.verb = @"";
    self.path = @"";
    self.body = [NSData data];
    self.requestId = 0L;
  }
  return self;
}
static WebSocketResourcesWebSocketRequestMessage* defaultWebSocketResourcesWebSocketRequestMessageInstance = nil;
+ (void) initialize {
  if (self == [WebSocketResourcesWebSocketRequestMessage class]) {
    defaultWebSocketResourcesWebSocketRequestMessageInstance = [[WebSocketResourcesWebSocketRequestMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWebSocketResourcesWebSocketRequestMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultWebSocketResourcesWebSocketRequestMessageInstance;
}
- (NSArray *)headers {
  return headersArray;
}
- (NSString*)headersAtIndex:(NSUInteger)index {
  return [headersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVerb) {
    [output writeString:1 value:self.verb];
  }
  if (self.hasPath) {
    [output writeString:2 value:self.path];
  }
  if (self.hasBody) {
    [output writeData:3 value:self.body];
  }
  if (self.hasRequestId) {
    [output writeUInt64:4 value:self.requestId];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVerb) {
    size_ += computeStringSize(1, self.verb);
  }
  if (self.hasPath) {
    size_ += computeStringSize(2, self.path);
  }
  if (self.hasBody) {
    size_ += computeDataSize(3, self.body);
  }
  if (self.hasRequestId) {
    size_ += computeUInt64Size(4, self.requestId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.headersArray.count;
    [self.headersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WebSocketResourcesWebSocketRequestMessage*) parseFromData:(NSData*) data {
  return (WebSocketResourcesWebSocketRequestMessage*)[[[WebSocketResourcesWebSocketRequestMessage builder] mergeFromData:data] build];
}
+ (WebSocketResourcesWebSocketRequestMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketRequestMessage*)[[[WebSocketResourcesWebSocketRequestMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketRequestMessage*) parseFromInputStream:(NSInputStream*) input {
  return (WebSocketResourcesWebSocketRequestMessage*)[[[WebSocketResourcesWebSocketRequestMessage builder] mergeFromInputStream:input] build];
}
+ (WebSocketResourcesWebSocketRequestMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketRequestMessage*)[[[WebSocketResourcesWebSocketRequestMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketRequestMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WebSocketResourcesWebSocketRequestMessage*)[[[WebSocketResourcesWebSocketRequestMessage builder] mergeFromCodedInputStream:input] build];
}
+ (WebSocketResourcesWebSocketRequestMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketRequestMessage*)[[[WebSocketResourcesWebSocketRequestMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketRequestMessageBuilder*) builder {
  return [[WebSocketResourcesWebSocketRequestMessageBuilder alloc] init];
}
+ (WebSocketResourcesWebSocketRequestMessageBuilder*) builderWithPrototype:(WebSocketResourcesWebSocketRequestMessage*) prototype {
  return [[WebSocketResourcesWebSocketRequestMessage builder] mergeFrom:prototype];
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) builder {
  return [WebSocketResourcesWebSocketRequestMessage builder];
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) toBuilder {
  return [WebSocketResourcesWebSocketRequestMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVerb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verb", self.verb];
  }
  if (self.hasPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"path", self.path];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"body", self.body];
  }
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithLongLong:self.requestId]];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"headers", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVerb) {
    [dictionary setObject: self.verb forKey: @"verb"];
  }
  if (self.hasPath) {
    [dictionary setObject: self.path forKey: @"path"];
  }
  if (self.hasBody) {
    [dictionary setObject: self.body forKey: @"body"];
  }
  if (self.hasRequestId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.requestId] forKey: @"requestId"];
  }
  [dictionary setObject:self.headers forKey: @"headers"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WebSocketResourcesWebSocketRequestMessage class]]) {
    return NO;
  }
  WebSocketResourcesWebSocketRequestMessage *otherMessage = other;
  return
      self.hasVerb == otherMessage.hasVerb &&
      (!self.hasVerb || [self.verb isEqual:otherMessage.verb]) &&
      self.hasPath == otherMessage.hasPath &&
      (!self.hasPath || [self.path isEqual:otherMessage.path]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      [self.headersArray isEqualToArray:otherMessage.headersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVerb) {
    hashCode = hashCode * 31 + [self.verb hash];
  }
  if (self.hasPath) {
    hashCode = hashCode * 31 + [self.path hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.requestId] hash];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WebSocketResourcesWebSocketRequestMessageBuilder()
@property (strong) WebSocketResourcesWebSocketRequestMessage* resultWebSocketRequestMessage;
@end

@implementation WebSocketResourcesWebSocketRequestMessageBuilder
@synthesize resultWebSocketRequestMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWebSocketRequestMessage = [[WebSocketResourcesWebSocketRequestMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWebSocketRequestMessage;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) clear {
  self.resultWebSocketRequestMessage = [[WebSocketResourcesWebSocketRequestMessage alloc] init];
  return self;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) clone {
  return [WebSocketResourcesWebSocketRequestMessage builderWithPrototype:resultWebSocketRequestMessage];
}
- (WebSocketResourcesWebSocketRequestMessage*) defaultInstance {
  return [WebSocketResourcesWebSocketRequestMessage defaultInstance];
}
- (WebSocketResourcesWebSocketRequestMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WebSocketResourcesWebSocketRequestMessage*) buildPartial {
  WebSocketResourcesWebSocketRequestMessage* returnMe = resultWebSocketRequestMessage;
  self.resultWebSocketRequestMessage = nil;
  return returnMe;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) mergeFrom:(WebSocketResourcesWebSocketRequestMessage*) other {
  if (other == [WebSocketResourcesWebSocketRequestMessage defaultInstance]) {
    return self;
  }
  if (other.hasVerb) {
    [self setVerb:other.verb];
  }
  if (other.hasPath) {
    [self setPath:other.path];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  if (other.headersArray.count > 0) {
    if (resultWebSocketRequestMessage.headersArray == nil) {
      resultWebSocketRequestMessage.headersArray = [[NSMutableArray alloc] initWithArray:other.headersArray];
    } else {
      [resultWebSocketRequestMessage.headersArray addObjectsFromArray:other.headersArray];
    }
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setVerb:[input readString]];
        break;
      }
      case 18: {
        [self setPath:[input readString]];
        break;
      }
      case 26: {
        [self setBody:[input readData]];
        break;
      }
      case 32: {
        [self setRequestId:[input readUInt64]];
        break;
      }
      case 42: {
        [self addHeaders:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasVerb {
  return resultWebSocketRequestMessage.hasVerb;
}
- (NSString*) verb {
  return resultWebSocketRequestMessage.verb;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) setVerb:(NSString*) value {
  resultWebSocketRequestMessage.hasVerb = YES;
  resultWebSocketRequestMessage.verb = value;
  return self;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) clearVerb {
  resultWebSocketRequestMessage.hasVerb = NO;
  resultWebSocketRequestMessage.verb = @"";
  return self;
}
- (BOOL) hasPath {
  return resultWebSocketRequestMessage.hasPath;
}
- (NSString*) path {
  return resultWebSocketRequestMessage.path;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) setPath:(NSString*) value {
  resultWebSocketRequestMessage.hasPath = YES;
  resultWebSocketRequestMessage.path = value;
  return self;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) clearPath {
  resultWebSocketRequestMessage.hasPath = NO;
  resultWebSocketRequestMessage.path = @"";
  return self;
}
- (BOOL) hasBody {
  return resultWebSocketRequestMessage.hasBody;
}
- (NSData*) body {
  return resultWebSocketRequestMessage.body;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) setBody:(NSData*) value {
  resultWebSocketRequestMessage.hasBody = YES;
  resultWebSocketRequestMessage.body = value;
  return self;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) clearBody {
  resultWebSocketRequestMessage.hasBody = NO;
  resultWebSocketRequestMessage.body = [NSData data];
  return self;
}
- (NSMutableArray *)headers {
  return resultWebSocketRequestMessage.headersArray;
}
- (NSString*)headersAtIndex:(NSUInteger)index {
  return [resultWebSocketRequestMessage headersAtIndex:index];
}
- (WebSocketResourcesWebSocketRequestMessageBuilder *)addHeaders:(NSString*)value {
  if (resultWebSocketRequestMessage.headersArray == nil) {
    resultWebSocketRequestMessage.headersArray = [[NSMutableArray alloc]init];
  }
  [resultWebSocketRequestMessage.headersArray addObject:value];
  return self;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder *)setHeadersArray:(NSArray *)array {
  resultWebSocketRequestMessage.headersArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder *)clearHeaders {
  resultWebSocketRequestMessage.headersArray = nil;
  return self;
}
- (BOOL) hasRequestId {
  return resultWebSocketRequestMessage.hasRequestId;
}
- (UInt64) requestId {
  return resultWebSocketRequestMessage.requestId;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) setRequestId:(UInt64) value {
  resultWebSocketRequestMessage.hasRequestId = YES;
  resultWebSocketRequestMessage.requestId = value;
  return self;
}
- (WebSocketResourcesWebSocketRequestMessageBuilder*) clearRequestId {
  resultWebSocketRequestMessage.hasRequestId = NO;
  resultWebSocketRequestMessage.requestId = 0L;
  return self;
}
@end

@interface WebSocketResourcesWebSocketResponseMessage ()
@property UInt64 requestId;
@property UInt32 status;
@property (strong) NSString* message;
@property (strong) NSMutableArray * headersArray;
@property (strong) NSData* body;
@end

@implementation WebSocketResourcesWebSocketResponseMessage

- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) _value_ {
  hasRequestId_ = !!_value_;
}
@synthesize requestId;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
@synthesize headersArray;
@dynamic headers;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestId = 0L;
    self.status = 0;
    self.message = @"";
    self.body = [NSData data];
  }
  return self;
}
static WebSocketResourcesWebSocketResponseMessage* defaultWebSocketResourcesWebSocketResponseMessageInstance = nil;
+ (void) initialize {
  if (self == [WebSocketResourcesWebSocketResponseMessage class]) {
    defaultWebSocketResourcesWebSocketResponseMessageInstance = [[WebSocketResourcesWebSocketResponseMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWebSocketResourcesWebSocketResponseMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultWebSocketResourcesWebSocketResponseMessageInstance;
}
- (NSArray *)headers {
  return headersArray;
}
- (NSString*)headersAtIndex:(NSUInteger)index {
  return [headersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequestId) {
    [output writeUInt64:1 value:self.requestId];
  }
  if (self.hasStatus) {
    [output writeUInt32:2 value:self.status];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  if (self.hasBody) {
    [output writeData:4 value:self.body];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequestId) {
    size_ += computeUInt64Size(1, self.requestId);
  }
  if (self.hasStatus) {
    size_ += computeUInt32Size(2, self.status);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(3, self.message);
  }
  if (self.hasBody) {
    size_ += computeDataSize(4, self.body);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.headersArray.count;
    [self.headersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WebSocketResourcesWebSocketResponseMessage*) parseFromData:(NSData*) data {
  return (WebSocketResourcesWebSocketResponseMessage*)[[[WebSocketResourcesWebSocketResponseMessage builder] mergeFromData:data] build];
}
+ (WebSocketResourcesWebSocketResponseMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketResponseMessage*)[[[WebSocketResourcesWebSocketResponseMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketResponseMessage*) parseFromInputStream:(NSInputStream*) input {
  return (WebSocketResourcesWebSocketResponseMessage*)[[[WebSocketResourcesWebSocketResponseMessage builder] mergeFromInputStream:input] build];
}
+ (WebSocketResourcesWebSocketResponseMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketResponseMessage*)[[[WebSocketResourcesWebSocketResponseMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketResponseMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WebSocketResourcesWebSocketResponseMessage*)[[[WebSocketResourcesWebSocketResponseMessage builder] mergeFromCodedInputStream:input] build];
}
+ (WebSocketResourcesWebSocketResponseMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketResponseMessage*)[[[WebSocketResourcesWebSocketResponseMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketResponseMessageBuilder*) builder {
  return [[WebSocketResourcesWebSocketResponseMessageBuilder alloc] init];
}
+ (WebSocketResourcesWebSocketResponseMessageBuilder*) builderWithPrototype:(WebSocketResourcesWebSocketResponseMessage*) prototype {
  return [[WebSocketResourcesWebSocketResponseMessage builder] mergeFrom:prototype];
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) builder {
  return [WebSocketResourcesWebSocketResponseMessage builder];
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) toBuilder {
  return [WebSocketResourcesWebSocketResponseMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithLongLong:self.requestId]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"body", self.body];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"headers", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequestId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.requestId] forKey: @"requestId"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasBody) {
    [dictionary setObject: self.body forKey: @"body"];
  }
  [dictionary setObject:self.headers forKey: @"headers"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WebSocketResourcesWebSocketResponseMessage class]]) {
    return NO;
  }
  WebSocketResourcesWebSocketResponseMessage *otherMessage = other;
  return
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      [self.headersArray isEqualToArray:otherMessage.headersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.requestId] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  [self.headersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WebSocketResourcesWebSocketResponseMessageBuilder()
@property (strong) WebSocketResourcesWebSocketResponseMessage* resultWebSocketResponseMessage;
@end

@implementation WebSocketResourcesWebSocketResponseMessageBuilder
@synthesize resultWebSocketResponseMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWebSocketResponseMessage = [[WebSocketResourcesWebSocketResponseMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWebSocketResponseMessage;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) clear {
  self.resultWebSocketResponseMessage = [[WebSocketResourcesWebSocketResponseMessage alloc] init];
  return self;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) clone {
  return [WebSocketResourcesWebSocketResponseMessage builderWithPrototype:resultWebSocketResponseMessage];
}
- (WebSocketResourcesWebSocketResponseMessage*) defaultInstance {
  return [WebSocketResourcesWebSocketResponseMessage defaultInstance];
}
- (WebSocketResourcesWebSocketResponseMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WebSocketResourcesWebSocketResponseMessage*) buildPartial {
  WebSocketResourcesWebSocketResponseMessage* returnMe = resultWebSocketResponseMessage;
  self.resultWebSocketResponseMessage = nil;
  return returnMe;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) mergeFrom:(WebSocketResourcesWebSocketResponseMessage*) other {
  if (other == [WebSocketResourcesWebSocketResponseMessage defaultInstance]) {
    return self;
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.headersArray.count > 0) {
    if (resultWebSocketResponseMessage.headersArray == nil) {
      resultWebSocketResponseMessage.headersArray = [[NSMutableArray alloc] initWithArray:other.headersArray];
    } else {
      [resultWebSocketResponseMessage.headersArray addObjectsFromArray:other.headersArray];
    }
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRequestId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setStatus:[input readUInt32]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
      case 34: {
        [self setBody:[input readData]];
        break;
      }
      case 42: {
        [self addHeaders:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRequestId {
  return resultWebSocketResponseMessage.hasRequestId;
}
- (UInt64) requestId {
  return resultWebSocketResponseMessage.requestId;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) setRequestId:(UInt64) value {
  resultWebSocketResponseMessage.hasRequestId = YES;
  resultWebSocketResponseMessage.requestId = value;
  return self;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) clearRequestId {
  resultWebSocketResponseMessage.hasRequestId = NO;
  resultWebSocketResponseMessage.requestId = 0L;
  return self;
}
- (BOOL) hasStatus {
  return resultWebSocketResponseMessage.hasStatus;
}
- (UInt32) status {
  return resultWebSocketResponseMessage.status;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) setStatus:(UInt32) value {
  resultWebSocketResponseMessage.hasStatus = YES;
  resultWebSocketResponseMessage.status = value;
  return self;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) clearStatus {
  resultWebSocketResponseMessage.hasStatus = NO;
  resultWebSocketResponseMessage.status = 0;
  return self;
}
- (BOOL) hasMessage {
  return resultWebSocketResponseMessage.hasMessage;
}
- (NSString*) message {
  return resultWebSocketResponseMessage.message;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) setMessage:(NSString*) value {
  resultWebSocketResponseMessage.hasMessage = YES;
  resultWebSocketResponseMessage.message = value;
  return self;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) clearMessage {
  resultWebSocketResponseMessage.hasMessage = NO;
  resultWebSocketResponseMessage.message = @"";
  return self;
}
- (NSMutableArray *)headers {
  return resultWebSocketResponseMessage.headersArray;
}
- (NSString*)headersAtIndex:(NSUInteger)index {
  return [resultWebSocketResponseMessage headersAtIndex:index];
}
- (WebSocketResourcesWebSocketResponseMessageBuilder *)addHeaders:(NSString*)value {
  if (resultWebSocketResponseMessage.headersArray == nil) {
    resultWebSocketResponseMessage.headersArray = [[NSMutableArray alloc]init];
  }
  [resultWebSocketResponseMessage.headersArray addObject:value];
  return self;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder *)setHeadersArray:(NSArray *)array {
  resultWebSocketResponseMessage.headersArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder *)clearHeaders {
  resultWebSocketResponseMessage.headersArray = nil;
  return self;
}
- (BOOL) hasBody {
  return resultWebSocketResponseMessage.hasBody;
}
- (NSData*) body {
  return resultWebSocketResponseMessage.body;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) setBody:(NSData*) value {
  resultWebSocketResponseMessage.hasBody = YES;
  resultWebSocketResponseMessage.body = value;
  return self;
}
- (WebSocketResourcesWebSocketResponseMessageBuilder*) clearBody {
  resultWebSocketResponseMessage.hasBody = NO;
  resultWebSocketResponseMessage.body = [NSData data];
  return self;
}
@end

@interface WebSocketResourcesWebSocketMessage ()
@property WebSocketResourcesWebSocketMessageType type;
@property (strong) WebSocketResourcesWebSocketRequestMessage* request;
@property (strong) WebSocketResourcesWebSocketResponseMessage* response;
@end

@implementation WebSocketResourcesWebSocketMessage

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasRequest {
  return !!hasRequest_;
}
- (void) setHasRequest:(BOOL) _value_ {
  hasRequest_ = !!_value_;
}
@synthesize request;
- (BOOL) hasResponse {
  return !!hasResponse_;
}
- (void) setHasResponse:(BOOL) _value_ {
  hasResponse_ = !!_value_;
}
@synthesize response;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = WebSocketResourcesWebSocketMessageTypeUnknown;
    self.request = [WebSocketResourcesWebSocketRequestMessage defaultInstance];
    self.response = [WebSocketResourcesWebSocketResponseMessage defaultInstance];
  }
  return self;
}
static WebSocketResourcesWebSocketMessage* defaultWebSocketResourcesWebSocketMessageInstance = nil;
+ (void) initialize {
  if (self == [WebSocketResourcesWebSocketMessage class]) {
    defaultWebSocketResourcesWebSocketMessageInstance = [[WebSocketResourcesWebSocketMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWebSocketResourcesWebSocketMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultWebSocketResourcesWebSocketMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasRequest) {
    [output writeMessage:2 value:self.request];
  }
  if (self.hasResponse) {
    [output writeMessage:3 value:self.response];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasRequest) {
    size_ += computeMessageSize(2, self.request);
  }
  if (self.hasResponse) {
    size_ += computeMessageSize(3, self.response);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WebSocketResourcesWebSocketMessage*) parseFromData:(NSData*) data {
  return (WebSocketResourcesWebSocketMessage*)[[[WebSocketResourcesWebSocketMessage builder] mergeFromData:data] build];
}
+ (WebSocketResourcesWebSocketMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketMessage*)[[[WebSocketResourcesWebSocketMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketMessage*) parseFromInputStream:(NSInputStream*) input {
  return (WebSocketResourcesWebSocketMessage*)[[[WebSocketResourcesWebSocketMessage builder] mergeFromInputStream:input] build];
}
+ (WebSocketResourcesWebSocketMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketMessage*)[[[WebSocketResourcesWebSocketMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WebSocketResourcesWebSocketMessage*)[[[WebSocketResourcesWebSocketMessage builder] mergeFromCodedInputStream:input] build];
}
+ (WebSocketResourcesWebSocketMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketResourcesWebSocketMessage*)[[[WebSocketResourcesWebSocketMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebSocketResourcesWebSocketMessageBuilder*) builder {
  return [[WebSocketResourcesWebSocketMessageBuilder alloc] init];
}
+ (WebSocketResourcesWebSocketMessageBuilder*) builderWithPrototype:(WebSocketResourcesWebSocketMessage*) prototype {
  return [[WebSocketResourcesWebSocketMessage builder] mergeFrom:prototype];
}
- (WebSocketResourcesWebSocketMessageBuilder*) builder {
  return [WebSocketResourcesWebSocketMessage builder];
}
- (WebSocketResourcesWebSocketMessageBuilder*) toBuilder {
  return [WebSocketResourcesWebSocketMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromWebSocketResourcesWebSocketMessageType(self.type)];
  }
  if (self.hasRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"request"];
    [self.request writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"response"];
    [self.response writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.request storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"request"];
  }
  if (self.hasResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.response storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"response"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WebSocketResourcesWebSocketMessage class]]) {
    return NO;
  }
  WebSocketResourcesWebSocketMessage *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasRequest == otherMessage.hasRequest &&
      (!self.hasRequest || [self.request isEqual:otherMessage.request]) &&
      self.hasResponse == otherMessage.hasResponse &&
      (!self.hasResponse || [self.response isEqual:otherMessage.response]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasRequest) {
    hashCode = hashCode * 31 + [self.request hash];
  }
  if (self.hasResponse) {
    hashCode = hashCode * 31 + [self.response hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL WebSocketResourcesWebSocketMessageTypeIsValidValue(WebSocketResourcesWebSocketMessageType value) {
  switch (value) {
    case WebSocketResourcesWebSocketMessageTypeUnknown:
    case WebSocketResourcesWebSocketMessageTypeRequest:
    case WebSocketResourcesWebSocketMessageTypeResponse:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromWebSocketResourcesWebSocketMessageType(WebSocketResourcesWebSocketMessageType value) {
  switch (value) {
    case WebSocketResourcesWebSocketMessageTypeUnknown:
      return @"WebSocketResourcesWebSocketMessageTypeUnknown";
    case WebSocketResourcesWebSocketMessageTypeRequest:
      return @"WebSocketResourcesWebSocketMessageTypeRequest";
    case WebSocketResourcesWebSocketMessageTypeResponse:
      return @"WebSocketResourcesWebSocketMessageTypeResponse";
    default:
      return nil;
  }
}

@interface WebSocketResourcesWebSocketMessageBuilder()
@property (strong) WebSocketResourcesWebSocketMessage* resultWebSocketMessage;
@end

@implementation WebSocketResourcesWebSocketMessageBuilder
@synthesize resultWebSocketMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWebSocketMessage = [[WebSocketResourcesWebSocketMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWebSocketMessage;
}
- (WebSocketResourcesWebSocketMessageBuilder*) clear {
  self.resultWebSocketMessage = [[WebSocketResourcesWebSocketMessage alloc] init];
  return self;
}
- (WebSocketResourcesWebSocketMessageBuilder*) clone {
  return [WebSocketResourcesWebSocketMessage builderWithPrototype:resultWebSocketMessage];
}
- (WebSocketResourcesWebSocketMessage*) defaultInstance {
  return [WebSocketResourcesWebSocketMessage defaultInstance];
}
- (WebSocketResourcesWebSocketMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WebSocketResourcesWebSocketMessage*) buildPartial {
  WebSocketResourcesWebSocketMessage* returnMe = resultWebSocketMessage;
  self.resultWebSocketMessage = nil;
  return returnMe;
}
- (WebSocketResourcesWebSocketMessageBuilder*) mergeFrom:(WebSocketResourcesWebSocketMessage*) other {
  if (other == [WebSocketResourcesWebSocketMessage defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasRequest) {
    [self mergeRequest:other.request];
  }
  if (other.hasResponse) {
    [self mergeResponse:other.response];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WebSocketResourcesWebSocketMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WebSocketResourcesWebSocketMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        WebSocketResourcesWebSocketMessageType value = (WebSocketResourcesWebSocketMessageType)[input readEnum];
        if (WebSocketResourcesWebSocketMessageTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        WebSocketResourcesWebSocketRequestMessageBuilder* subBuilder = [WebSocketResourcesWebSocketRequestMessage builder];
        if (self.hasRequest) {
          [subBuilder mergeFrom:self.request];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequest:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        WebSocketResourcesWebSocketResponseMessageBuilder* subBuilder = [WebSocketResourcesWebSocketResponseMessage builder];
        if (self.hasResponse) {
          [subBuilder mergeFrom:self.response];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponse:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultWebSocketMessage.hasType;
}
- (WebSocketResourcesWebSocketMessageType) type {
  return resultWebSocketMessage.type;
}
- (WebSocketResourcesWebSocketMessageBuilder*) setType:(WebSocketResourcesWebSocketMessageType) value {
  resultWebSocketMessage.hasType = YES;
  resultWebSocketMessage.type = value;
  return self;
}
- (WebSocketResourcesWebSocketMessageBuilder*) clearType {
  resultWebSocketMessage.hasType = NO;
  resultWebSocketMessage.type = WebSocketResourcesWebSocketMessageTypeUnknown;
  return self;
}
- (BOOL) hasRequest {
  return resultWebSocketMessage.hasRequest;
}
- (WebSocketResourcesWebSocketRequestMessage*) request {
  return resultWebSocketMessage.request;
}
- (WebSocketResourcesWebSocketMessageBuilder*) setRequest:(WebSocketResourcesWebSocketRequestMessage*) value {
  resultWebSocketMessage.hasRequest = YES;
  resultWebSocketMessage.request = value;
  return self;
}
- (WebSocketResourcesWebSocketMessageBuilder*) setRequestBuilder:(WebSocketResourcesWebSocketRequestMessageBuilder*) builderForValue {
  return [self setRequest:[builderForValue build]];
}
- (WebSocketResourcesWebSocketMessageBuilder*) mergeRequest:(WebSocketResourcesWebSocketRequestMessage*) value {
  if (resultWebSocketMessage.hasRequest &&
      resultWebSocketMessage.request != [WebSocketResourcesWebSocketRequestMessage defaultInstance]) {
    resultWebSocketMessage.request =
      [[[WebSocketResourcesWebSocketRequestMessage builderWithPrototype:resultWebSocketMessage.request] mergeFrom:value] buildPartial];
  } else {
    resultWebSocketMessage.request = value;
  }
  resultWebSocketMessage.hasRequest = YES;
  return self;
}
- (WebSocketResourcesWebSocketMessageBuilder*) clearRequest {
  resultWebSocketMessage.hasRequest = NO;
  resultWebSocketMessage.request = [WebSocketResourcesWebSocketRequestMessage defaultInstance];
  return self;
}
- (BOOL) hasResponse {
  return resultWebSocketMessage.hasResponse;
}
- (WebSocketResourcesWebSocketResponseMessage*) response {
  return resultWebSocketMessage.response;
}
- (WebSocketResourcesWebSocketMessageBuilder*) setResponse:(WebSocketResourcesWebSocketResponseMessage*) value {
  resultWebSocketMessage.hasResponse = YES;
  resultWebSocketMessage.response = value;
  return self;
}
- (WebSocketResourcesWebSocketMessageBuilder*) setResponseBuilder:(WebSocketResourcesWebSocketResponseMessageBuilder*) builderForValue {
  return [self setResponse:[builderForValue build]];
}
- (WebSocketResourcesWebSocketMessageBuilder*) mergeResponse:(WebSocketResourcesWebSocketResponseMessage*) value {
  if (resultWebSocketMessage.hasResponse &&
      resultWebSocketMessage.response != [WebSocketResourcesWebSocketResponseMessage defaultInstance]) {
    resultWebSocketMessage.response =
      [[[WebSocketResourcesWebSocketResponseMessage builderWithPrototype:resultWebSocketMessage.response] mergeFrom:value] buildPartial];
  } else {
    resultWebSocketMessage.response = value;
  }
  resultWebSocketMessage.hasResponse = YES;
  return self;
}
- (WebSocketResourcesWebSocketMessageBuilder*) clearResponse {
  resultWebSocketMessage.hasResponse = NO;
  resultWebSocketMessage.response = [WebSocketResourcesWebSocketResponseMessage defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
